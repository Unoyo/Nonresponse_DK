rmse
proc.time() - Hajime
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict(glm_fit, newdata = mydata_test)
}
predictions <- rowMeans(predictions)
rmse <- sqrt((sum((mydata_test$inf_exp - predictions)^2))/nrow(mydata_test))
rmse
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
length_divisor = 4
sampling <- sample(nrow(mydata_u), size = 2*floor((nrow(mydata_u))/length_divisor))
mydata_u_train <- mydata_u[sampling,]
mydata_u_test <- mydata_u[-sampling,]
mydata_train <- rbind(mydata_u_train, mydata_p)
mydata_test <- rbind(mydata_u_test, mydata_p)
B = 100
predictions <- foreach(m = 1:B, .combine = rbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict <- predict(glm_fit, newdata = mydata_test, type = "response")
s <- summary(glm_fit)
p <- s$coeff[,4]
c <- s$coeff[,1]
pvalues <- p[p<0.1]
coeffs  <- c[p<0.1]
return(list(predict,pvalues,coeffs))
}
#  predictions <- rowMeans(predictions)
#  rmse <- sqrt((sum((mydata_test$inf_exp - predictions)^2))/nrow(mydata_test))
#  rmse
proc.time() - Hajime
predict
dim(predict)
dim(predictions)
predictions
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
length_divisor = 4
sampling <- sample(nrow(mydata_u), size = 2*floor((nrow(mydata_u))/length_divisor))
mydata_u_train <- mydata_u[sampling,]
mydata_u_test <- mydata_u[-sampling,]
mydata_train <- rbind(mydata_u_train, mydata_p)
mydata_test <- rbind(mydata_u_test, mydata_p)
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict(glm_fit, newdata = mydata_u)
}
predictions <- rowMeans(predictions)
rmse <- sqrt((sum((mydata_test$inf_exp - predictions)^2))/nrow(mydata_test))
rmse
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
length_divisor = 4
sampling <- sample(nrow(mydata_u), size = 2*floor((nrow(mydata_u))/length_divisor))
mydata_u_train <- mydata_u[sampling,]
mydata_u_test <- mydata_u[-sampling,]
mydata_train <- rbind(mydata_u_train, mydata_p)
mydata_test <- rbind(mydata_u_test, mydata_p)
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict(glm_fit, newdata = mydata_u)
}
predictions <- rowMeans(predictions)
rmse <- sqrt((sum((mydata_u$inf_exp - predictions)^2))/nrow(mydata_u))
rmse
proc.time() - Hajime
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict(glm_fit, newdata = mydata_u)
}
predictions <- rowMeans(predictions)
rmse <- sqrt((sum((mydata_u$inf_exp - predictions)^2))/nrow(mydata_u))
rmse
proc.time() - Hajime
u_p <- predictions[predictions > 0.5]
u_p
predictions
predictions <- rowMeans(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
u_n
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_train), size = floor((nrow(mydata_train)/length_divisor)))
glm_fit <- glm(formula = f, data = mydata_train[train_pos,], family = binomial)
predict(glm_fit, newdata = mydata_u, type="response")
}
predictions <- rowMeans(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
rmse <- sqrt((sum((mydata_u$inf_exp - predictions)^2))/nrow(mydata_u))
rmse
levels(predictions)
predictions
dim(predictions)
plot(predictions)
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
length_divisor = 4
#  sampling <- sample(nrow(mydata_u), size = 2*floor((nrow(mydata_u))/length_divisor))
#  mydata_u_train <- mydata_u[sampling,]
#  mydata_u_test <- mydata_u[-sampling,]
#  mydata_train <- rbind(mydata_u_train, mydata_p)
#  mydata_test <- rbind(mydata_u_test, mydata_p)
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/length_divisor)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[train_pos,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
proc.time() - Hajime
plot(predictions)
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
length_divisor = 4
B = 100
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
train_pos <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/length_divisor)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[train_pos,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
proc.time() - Hajime
predict(glm_fit, newdata = mydata_u, type = "response")
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE)
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 4
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(3/4,1/4))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 4
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
proc.time() - Hajime
count(u_p)
length(u_p)
length(u_n)
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(1/4,3/4))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 4
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p) length(u_n)
proc.time() - Hajime
length(u_p)
length(u_n)
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(1/4,3/4))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 2
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p)
length(u_n)
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(2/5,3/5))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 2
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p)
length(u_n)
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(2/5,3/5))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 1.5
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p)
length(u_n)
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(2/5,3/5))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 2
B = 1000
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p)
length(u_n)
proc.time() - Hajime
suppressMessages(library(foreach))
suppressMessages(library(dplyr))
Hajime <- proc.time()
mydata <- NULL
N <- 10000
for(i in 1:13){
assign(paste("di",i,sep = ""),as.factor(sample(1:3, size = N, replace = TRUE)))
mydata <- cbind(mydata, get(paste("di",i,sep = "")))
mydata <- as.data.frame(mydata)
names(mydata)[i] <- paste("di",i,sep = "")
}
mydata$inf_exp <- sample(0:1, size = N, replace = TRUE, prob = c(2/5,3/5))
mydata$ind <- as.factor(sample(1:100, size = N, replace = TRUE))
mydata_p <- mydata %>%
filter(inf_exp == 1)
mydata_u <- mydata %>%
filter(inf_exp == 0)
mydata_names <- names(mydata)
f <- as.formula(paste("inf_exp~", paste(mydata_names[mydata_names != "inf_exp"], collapse = "+")))
m = 2
B = 10
predictions <- foreach(m = 1:B, .combine = cbind) %do% {
M <- sample(nrow(mydata_u), size = floor((nrow(mydata_u)/m)))
glm_fit <- glm(formula = f,
data = rbind(mydata_p, mydata_u[M,]),
family = binomial)
predict(glm_fit, newdata = mydata_u, type = "response")
}
predictions <- rowMeans(predictions)
plot(predictions)
u_p <- predictions[predictions > 0.5]
u_n <- predictions[predictions <= 0.5]
length(u_p)
length(u_n)
proc.time() - Hajime
